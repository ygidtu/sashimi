#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2022/5/8 10:04 AM
u"""

Fetch CDS information from a gtf then mapping to genomic position

"""
from src.GenomicLoci import GenomicLoci
from src.Transcript import Transcript
from pysam import asGTF
from pysam.libctabix import Tabixfile
from collections import defaultdict, namedtuple
from conf.logger import logger
from src.pyUniprot import Uniprot
from src.CoordinateMap import CoordinateMapper


class CdsProtein(GenomicLoci):
    u"""
    Re-collect cds information
    """

    def __init__(
            self,
            chromosome: str,
            start: int,
            end: int,
            strand: str,
            cds: dict
    ):
        u"""
        Re-iter the gtf and collection all CDS information from gtf, not truncated genomic region at here
        :param chromosome: the chromosome id of the  given genes
        :param start: the minima start site of the given genes
        :param end: the maxima start site of the given genes
        :param strand: strand of gene
        :param cds: a list of Transcript object
        """
        super().__init__(
            chromosome=chromosome,
            start=start,
            end=end,
            strand=strand)
        self.cds = cds
        self.pep = self.__init_protein__()

    @classmethod
    def __re_iter_gtf__(
            cls,
            gtf_tabix: Tabixfile,
            chromosome: str,
            transcript_id: set,
            gene_id: set,
            strand: str = "*"
    ):
        u"""
        Generate the CdsProtein object
        :param gtf_tabix: a Tabixfile object generated by pysam
        :param chromosome: the chromosome id of the given genes
        :param transcript_id: the set of transcript_id to fetch CDS region
        :param gene_id: the set of gene_id to fetch CDS region, and also used to stop the iteration
        :param strand: the strand of gene
        :return:
        """
        relevant_exon_iterator = gtf_tabix.fetch(
            reference=chromosome,
            parser=asGTF()
        )

        boundary_for_iter = []

        cds_dict = defaultdict(list)

        for line in relevant_exon_iterator:

            if strand != "*" and line.strand != strand:
                continue
            if "transcript_id" not in line.keys():
                continue

            try:
                if len(boundary_for_iter) == len(gene_id) and \
                        line.end > max(boundary_for_iter):
                    break

                # update the lower boundary to stop the iter.
                if line.gene_id in gene_id:
                    boundary_for_iter.append(line.end)

                if line.transcript_id in transcript_id and \
                        line.feature == "CDS":
                    cds_dict[line.transcript_id].append(line)

            except KeyError as err:
                logger.warning(err)

        cds_contain = {}
        start_site = float('Inf')
        end_site = float('-Inf')

        if len(cds_dict) != 0:

            for current_trans_id in cds_dict.keys():
                current_exon_list = cds_dict[current_trans_id]
                current_start = min(map(lambda x: x.start + 1, current_exon_list))
                current_end = max(map(lambda x: x.end, current_exon_list))

                cds_contain[current_trans_id] = Transcript(
                    chromosome=chromosome,
                    start=current_start,
                    end=current_end,
                    strand=current_exon_list[0].strand,
                    exons=current_exon_list,
                    gene=current_exon_list[0].gene_name \
                        if "gene_name" in current_exon_list[0].keys() else "",
                    gene_id=current_exon_list[0].gene_id \
                        if "gene_id" in current_exon_list[0].keys() else "",
                    transcript=current_exon_list[0].transcript_name \
                        if "transcript_name" in current_exon_list[0].keys() else "",
                    transcript_id=current_exon_list[0].transcript_id \
                        if "transcript_id" in current_exon_list[0].keys() else ""
                )
                start_site = current_start if current_start < start_site else start_site
                end_site = current_end if current_end > end_site else end_site

            return cls(
                chromosome=chromosome,
                start=start_site,
                end=end_site,
                strand=strand,
                cds=cds_contain
            )
        return None

    def __init_protein__(self):
        u"""
        Initiate the CdsProtein object
        :return:
        """
        protein_info = defaultdict(list)
        Domain_region = namedtuple('DomainGenomicRegion', ['name', 'type', 'start', 'end'])
        for current_transcript_id in self.cds.keys():
            current_pep = Uniprot(current_transcript_id)
            if not current_pep.feature:
                protein_info[current_transcript_id] = []
                continue
            coord_mapper = CoordinateMapper(
                coordinates_list=self.cds[current_transcript_id].exon_list,
                strand=self.cds[current_transcript_id].strand
            )
            for domain in current_pep.__domain_info__:

                pep_genomic_coord = coord_mapper.pep_to_cds(
                    domain.start,
                    domain.end
                )

                # keep the protein genomic coordinate into a list
                domain_list = []
                for sub_domain_start, sub_domain_end in pep_genomic_coord.se:
                    domain_list.append(
                        Domain_region._make(
                            [domain.name,
                             domain.type,
                             sub_domain_start,
                             sub_domain_end
                             ]
                        )
                    )

                protein_info[current_transcript_id].append(
                    Transcript(
                        chromosome=self.chromosome,
                        start=min(map(lambda x: x[0], pep_genomic_coord.se)),
                        end=max(map(lambda x: x[1], pep_genomic_coord.se)),
                        strand=self.cds[current_transcript_id].strand,
                        exons=domain_list,
                        gene=domain.name,
                        domain=domain.type,
                        category="protein"
                    )
                )

        return protein_info


def main():
    import pysam
    with pysam.Tabixfile("../example/example.sorted.gtf.gz", 'r') as gtf_tabix:
        test = CdsProtein.__re_iter_gtf__(
            gtf_tabix=gtf_tabix,
            chromosome='chr1',
            transcript_id={'ENST00000420190', 'ENST00000437963'},
            gene_id={'ENSG00000187634'}
        )

        for transcript_id, domains in test.pep.items():
            if len(domains) == 0:
                continue
            for sub_domain in domains:
                print(transcript_id, sub_domain.gene, sub_domain.domain, sub_domain.exon_list)


if __name__ == '__main__':
    main()
